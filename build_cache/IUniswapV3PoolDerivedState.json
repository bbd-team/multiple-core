{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "secondsAgos",
          "type": "uint32[]"
        }
      ],
      "name": "observe",
      "outputs": [
        {
          "internalType": "int56[]",
          "name": "tickCumulatives",
          "type": "int56[]"
        },
        {
          "internalType": "uint160[]",
          "name": "liquidityCumulatives",
          "type": "uint160[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        }
      ],
      "name": "secondsInside",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "evm": {
    "bytecode": {
      "object": "",
      "sourceMap": ""
    },
    "deployedBytecode": {
      "object": "",
      "sourceMap": ""
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"}],\"name\":\"observe\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"liquidityCumulatives\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"secondsInside\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"observe(uint32[])\":{\"details\":\"To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\"params\":{\"secondsAgos\":\"From how long ago each cumulative tick and liquidity value should be returned\"},\"returns\":{\"liquidityCumulatives\":\"Cumulative liquidity-in-range value as of each `secondsAgos` from the current block timestamp\",\"tickCumulatives\":\"Cumulative tick values as of each `secondsAgos` from the current block timestamp\"}},\"secondsInside(int24,int24)\":{\"details\":\"This timestamp is strictly relative. To get a useful elapsed time (i.e., duration) value, the value returned by this method should be checkpointed externally after a position is minted, and again before a position is burned. Thus the external contract must control the lifecycle of the position.\",\"params\":{\"tickLower\":\"The lower tick of the range for which to get the seconds inside\",\"tickUpper\":\"The upper tick of the range for which to get the seconds inside\"},\"returns\":{\"_0\":\"A relative timestamp for how long the pool spent in the tick range\"}}},\"title\":\"Pool state that is not stored\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"observe(uint32[])\":{\"notice\":\"Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\"},\"secondsInside(int24,int24)\":{\"notice\":\"Returns a relative timestamp value representing how long, in seconds, the pool has spent between tickLower and tickUpper\"}},\"notice\":\"Contains view functions to provide information about the pool that is computed rather than stored on the blockchain. The functions here may have variable gas costs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/uniswap-v3-core/interfaces/pool/IUniswapV3PoolDerivedState.sol\":\"IUniswapV3PoolDerivedState\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/external/uniswap-v3-core/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"keccak256\":\"0x8cc7093ef09566539dc9b4527671c84c028a94873605ef7d733e33b9b4efad45\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://6d57a17c2ed6f566f5386a152f4cb6da6784ffc694c07afefc5d27f0a9ec6e9d\",\"dweb:/ipfs/QmafdHdxCzX7zoA91CjQcQ846wCwG6PPuQjtbZHoiHTgsm\"]}},\"version\":1}",
  "bytecode": "",
  "humanReadableAbi": [
    "function observe(uint32[] secondsAgos) view returns(int56[] tickCumulatives, uint160[] liquidityCumulatives)",
    "function secondsInside(int24 tickLower, int24 tickUpper) view returns(uint32)"
  ]
}